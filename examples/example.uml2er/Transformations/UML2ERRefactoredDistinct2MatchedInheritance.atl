-- @path SimpleUML=/UML2ER/Metamodels/SimpleUml.ecore
-- @path ER=/UML2ER/Metamodels/ER.ecore

module UML2ER;
create OUT : ER from IN : SimpleUML;

rule Package {
	from
		s: SimpleUML!Package
	to
		t: ER!ERModel (
			entities <- s.ownedElements	
		)
}


helper context SimpleUML!Class def: allClasses() : Sequence(SimpleUML!Class) =
 self.superClasses->iterate(e; acc : Sequence(SimpleUML!Class) = Sequence {} |
  acc->union(Set{e})->union(e.allClasses())
 );

helper context SimpleUML!Class def : getAllProperties() : Sequence (SimpleUML!Properties) =
	self.allClasses().including(self).flatten()->collect(e | e.ownedProperty).flatten()
	;

helper context SimpleUML!Class def : getAllAttributes() : Sequence (SimpleUML!Properties) =
	self.getAllProperties() -> select (e | not e.primitiveType.oclIsUndefined())
;

helper context SimpleUML!Class def : getAllNonContainmentReferences() : Sequence (SimpleUML!Properties) =
	self.getAllProperties() -> select (e | not e.complexType.oclIsUndefined() and not e.isContainment)
;

helper context SimpleUML!Class def : getAllContainmentReferences() : Sequence (SimpleUML!Properties) =
	self.getAllProperties() -> select (e | not e.complexType.oclIsUndefined() and e.isContainment)
;

rule Class {
	from
		s: SimpleUML!Class
	to
		t: ER!EntityType (
			name <- s.name,
			features <- s.getAllProperties() -> collect(e | Tuple {s = e, c = s})
		)			
}


abstract rule Property{
	from
		s: SimpleUML!Property,
		c : SimpleUML!Class (
			c.getAllProperties()->includes(s)
		)
		
	to
		t: ER!Feature (
			name <- s.name
		)	
}

rule Attributes extends Property{
	from
		s: SimpleUML!Property,
		c : SimpleUML!Class (
			--c.getAllAttributes()->includes(s)
			not s.primitiveType.oclIsUndefined()
		)
		
	to
		t: ER!Attribute (
			type <- s.primitiveType	
		)
}

abstract rule References extends Property{
	from
		s: SimpleUML!Property,
		c : SimpleUML!Class
	to
		t: ER!WeakReference (
			type <- s.complexType
		)
}

rule WeakReferences extends References{
	from
		s: SimpleUML!Property,
		c : SimpleUML!Class (
			c.getAllNonContainmentReferences()->includes(s)
			--not s.complexType.oclIsUndefined() and not s.isContainment
		)
	to
		t: ER!WeakReference
}

rule StrongReferences extends References{
	from
		s: SimpleUML!Property,
		c : SimpleUML!Class (
			c.getAllContainmentReferences()->includes(s)
			--not s.complexType.oclIsUndefined() and s.isContainment
		)
	to
		t: ER!StrongReference
}