-- @path SimpleUML=/example.uml2er/Metamodels/SimpleUml.ecore
-- @path ER=/example.uml2er/Metamodels/ER.ecore

module UML2ER;
create OUT : ER from IN : SimpleUML;

rule Package {
	from
		s: SimpleUML!Package
	to
		t: ER!ERModel (
			entities <- s.ownedElements	
		)
}

helper context SimpleUML!Class def: allClasses : Sequence(SimpleUML!Class) =
 self.superClasses->iterate(e; acc : Sequence(SimpleUML!Class) = Sequence {} |
  acc->union(Set{e})->union(e.allClasses)
 );

helper context SimpleUML!Class def : getAllProperties : Sequence (SimpleUML!Property) =
	self.allClasses.including(self).flatten()->collect(e | e.ownedProperty).flatten()
	;

helper context SimpleUML!Class def : getAllAttributes : Sequence (SimpleUML!Property) =
	self.getAllProperties -> select (e | not e.primitiveType.oclIsUndefined())
;

helper context SimpleUML!Class def : getAllNonContainmentReferences : Sequence (SimpleUML!Property) =
	self.getAllProperties -> select (e | not e.complexType.oclIsUndefined() and not e.isContainment)
;

helper context SimpleUML!Class def : getAllContainmentReferences : Sequence (SimpleUML!Property) =
	self.getAllProperties -> select (e | not e.complexType.oclIsUndefined() and e.isContainment)
;

rule Class {
	from
		s: SimpleUML!Class
	to
		t: ER!EntityType (
			name <- s.name,
			features <- Sequence {attributes, weakReferences, strongReferences}
		),
		attributes : distinct ER!Attribute foreach(a in s.getAllAttributes) (
				name <- a.name,
				type <- a.primitiveType
			),
		weakReferences : distinct ER!WeakReference foreach(a in s.getAllNonContainmentReferences) (
				name <- a.name,
				type <- a.complexType
			),
		strongReferences : distinct ER!StrongReference foreach(a in s.getAllContainmentReferences) (
				name <- a.name,
				type <- a.complexType
			)			
}